import requests
from urllib.parse import urlencode
import json
from requests.exceptions import RequestException
import  os
from hashlib import md5
from multiprocessing import Pool
start=0
end=20
def  get_one_index(offset):
    try:
        data={"offset":offset,
        "format": "json",
        "keyword": "街拍",
        "autoload": "true",
        "count" : " 20",
        "cur_tab": " 1",
        "from": "search_tab"}
        url='https://www.toutiao.com/search_content/?'+urlencode(data)
        headers={"user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36"}
        response=requests.get(url,headers=headers)
        if response.status_code==200:
            return response.json()  
        return None
    except RequestException:
        print('请求失败')
        return None

def parse_one_index(json):    
    data=json['data']    
    for item in data:
        #print(item,end='\n\n\n')
        image_list=item.get('image_list')
        title=item.get('title')
        #print(image_list,title)
        if image_list:
            for image in image_list:
                yield {
                    "image":image.get('url'),
                    "title":title
                }
def save_image(item):
    if not os.path.exists(item['title']):    
        os.mkdir(item['title'])
    try:
        image=item['image']
        image_url='http:'+image.replace('list','large')
        response=requests.get(image_url)
        if response.status_code==200:
            file_2path='{0}/{1}.{2}'.format(item['title'],md5(response.content).hexdigest(),'jpg')
            if not os.path.exists(file_2path):
                with open(file_2path,'wb')  as f:
                    f.write(response.content)
            else:
                print('已经存在：',file_2path)
    except RequestException:
        print('保存失败')

def main(offset):
    json=get_one_index(offset)
    print(json)
    for item in parse_one_index(json):
        print(item)
        save_image(item)


if __name__=='__main__':
    try:
        pool=Pool()
        pool.map(main,[offset*20 for offset in range(start,end+1)])
        pool.close()
        Pool.join()
    except :
        print('end')

